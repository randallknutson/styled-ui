webpackJsonp([19],{2211:function(t,e,n){var o=n(0),a=n(94),i=n(467).PageRenderer;i.__esModule&&(i=i.default);var s=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(2295)}},componentWillMount:function(){},render:function(){return o.createElement(i,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,t.exports=s},2295:function(t,e){t.exports='For the next major version of Styled UI, the Radio component has been rebuilt to use our global Styled System theme and two new config components instead of its legacy `theme` prop.\n\nYou can opt in to the new API now by importing `{ Radio } from \'@faithlife/styled-ui/v6\'`. When v6 is released, the `/v6` entrypoint will continue to be supported with a deprecation warning until v7 is released.\n\n### Default theme\n\n```react\nshowSource: true\nstate: { isChecked: false }\n---\n<RadioDemo>\n\t<Radio\n\t\tonClick={() => setState({ isChecked: !state.isChecked })}\n\t\tisChecked={state.isChecked}\n\t\ttitle={\'Click me\'}\n\t\ttype="button"\n\t/>\n</RadioDemo>\n```\n\n### Custom theme\n\n```react\nshowSource: true\nstate: { isChecked: false }\n---\n<RadioDemo>\n\t<ThemeProvider theme={{\n\t\tcolors: {\n\t\t\tradio: { primary: \'darkslateblue\', border: \'plum\' }\n\t\t}\n\t}}>\n\t\t<Radio\n\t\t\tonClick={() => setState({ isChecked: !state.isChecked })}\n\t\t\tisChecked={state.isChecked}\n\t\t\ttitle={\'Click me\'}\n\t\t\ttype="button"\n\t\t/>\n\t</ThemeProvider>\n</RadioDemo>\n```\n\n### Custom label component\n\n```react\nshowSource: true\nstate: { isChecked: false }\n---\n<RadioDemo>\n\t<Radio\n\t\tonClick={() => setState({ isChecked: !state.isChecked })}\n\t\tisChecked={state.isChecked}\n\t\ttype="button"\n\t>\n\t\t<span>No, click <b>me</b>!</span>\n\t</Radio>\n</RadioDemo>\n```\n\n### Disabled state\n\n```react\nshowSource: true\nstate: { isChecked: false }\n---\n<RadioDemo>\n\t<Radio\n\t\tonClick={() => setState({ isChecked: !state.isChecked })}\n\t\tisChecked={state.isChecked}\n\t\ttitle={\'You can\\\'t click me\'}\n\t\ttype="button"\n\t\tdisabled\n\t>\n\t</Radio>\n</RadioDemo>\n```\n\n### Custom icon/label props\n\nExtra props on the `Radio` component are passed to the container. To pass Styled System props to just the icon or just the label, use `Radio.Icon` and/or `Radio.Label` config components.\n\n```react\nshowSource: true\nstate: { isChecked: false }\n---\n<RadioDemo>\n\t<Radio\n\t\tonClick={() => setState({ isChecked: !state.isChecked })}\n\t\tisChecked={state.isChecked}\n\t\ttype="button"\n\t>\n\t\t<Radio.Icon size="25px" />\n\t\t<Radio.Label color="red">A bigger icon and a red label</Radio.Label>\n\t</Radio>\n</RadioDemo>\n```\n'}});
//# sourceMappingURL=19.5eb1c6ce.chunk.js.map